program := [<procedure-declaration-part] <statement-part>
procedure-declaration-part ::= <procedure-heading> <procedure-body>
procedure-body ::= { <statement> } END
statement-part := {statement}

procedure-heading ::= TO <procedure-identifier> [ <variable-identifier-list> ]

statement ::= <simple-statement> | <structured-statement>
simple-statement ::= [ <assignment-statement> |
					   <procedure-statement>  |
					   <movement-statement> |
					   <drawing-statement> |
					   <text-statement> ]
					   
assigment-statement ::= MAKE <variable-identifier> <expression>

procedure-statement ::= <procedure-identifier> [ <actual-parameter-list> ]
actual-parameter-list ::= <actual-value> | <actual-variable>
actual-value ::= <expression>
actual-variable ::= <variable-identifier>

structured-statement ::= <repetitive-statement> | <conditional-statement>
repetitive-statement ::= REPEAT <expression> "[" { <statement> } "]"
conditional-statement ::= <if-statement> | <if-else-statement>
if-statement ::= IF <expression> "[" <if-true> "]"
if-else-statement ::= IFELSE <expression> "[" <if-true> "]" "[" <if-false> "]"
if-true ::= { <statement> }
if-false ::= { <statement> }

movement-statement ::= <forward-statement> | <backward-statement> |
					   <right-statement> | <left-statement> | <setx-statement> |
					   <sety-statement> | <setxy-statement> | HOME
forward-statement ::= (FORWARD | FD) <expression>
backward-statement ::= (BACKWARD | BK) <expression>
right-statement ::= (RIGHT | RT) <expression>
left-statement ::= (LEFT | LT) <expression>
setx-statement ::= SETX <expression>
sety-statement ::= SETY <expression>
setxy-statement ::= SETXY <expression> <expression>

<drawing-statement> := <clear-statement> | <circle-statement> | 
					   <arc-statement> | <penup-staement> | 
					   <pendown-statement> | <color-statement> |
					   <penwidth-statement>
clear-statement ::= (CLEAR | CS)
circle-statement ::= CIRCLE <expression>
arc-statement ::= ARC <expression> <expression>
penup-statement ::= (PENUP | PU)
pendown-statement ::= (PENDOWN | PD)
color-statement ::= COLOR "[" <expression> <expression> <expression> "]"
penwidth-statement ::= PENWIDTH <expression>

text-statement ::= PRINT (<expression> | "[" { <expression> } "]"

expression ::= <simple-expression> [ <relational-operator> <simple-expression> ]
simple-expression ::= [ <sign> ] <term> { <addition-operator> <term> }
term ::= <factor> { <multiplication-operator> <factor> }
factor ::= <variable> | <number> | <string> |
		   “(” <expression> “)” | “not” <factor>
relational-operator ::= “=” | “<>” | “<” | “<=” | “>” | “>=”
addition-operator ::= “+” | “-” | “or”
multiplication-operator ::= “*” | “/” | “mod” | “and”
variable ::= <variable-identifier>

variable-identifier ::= ":"<identifier>
procedure-identifier ::= <identifier>
identifier ::= <letter> { <letter> | <digit> }

variable-identifier-list ::= <variable-identifer> { <variable-identifier> }
identifier-list ::= <identifier> { <identifier> }
number ::= <integer-number> | <real-number>
integer-number ::= <digit-sequence>
real-number ::= <digit-sequence> “.” [ <unsigned-digit-sequence> ] [ <scale-factor> ]
				| <digit-sequence> <scale-factor>
scale-factor ::= ( “E” | “e” ) <digit-sequence>
unsigned-digit-sequence ::= <digit> { <digit> }
digit-sequence ::= [ <sign> ] <unsigned-digit-sequence>
sign ::= “+” | “-”
letter ::= [ “A” - “Z” ] | [ “a” - “z” ]
digit ::= [ “0” - “9” ]
string ::= '"' <string-character> { string-character } '"'
string-character ::= <any-character-except-quote>
